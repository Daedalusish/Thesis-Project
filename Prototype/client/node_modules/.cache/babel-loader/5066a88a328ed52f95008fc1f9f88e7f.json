{"remainingRequest":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\src\\SearchService.js","dependencies":[{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\src\\SearchService.js","mtime":1588936408906},{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIkM6L1VzZXJzL0pvaG4gRG9lL0Rlc2t0b3AvTmV3IGZvbGRlci9hbHBoYUJ1aWxkL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0pvaG4gRG9lL0Rlc2t0b3AvTmV3IGZvbGRlci9hbHBoYUJ1aWxkL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQzovVXNlcnMvSm9obiBEb2UvRGVza3RvcC9OZXcgZm9sZGVyL2FscGhhQnVpbGQvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzovVXNlcnMvSm9obiBEb2UvRGVza3RvcC9OZXcgZm9sZGVyL2FscGhhQnVpbGQvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgovKiBlc2xpbnQtZGlzYWJsZSBuby1hc3luYy1wcm9taXNlLWV4ZWN1dG9yICovCmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CnZhciB1cmwgPSAnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2FwaSc7Cgp2YXIgUG9zdFNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBvc3RTZXJ2aWNlKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvc3RTZXJ2aWNlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQb3N0U2VydmljZSwgbnVsbCwgW3sKICAgIGtleTogInNlYXJjaE1vdmllIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2hNb3ZpZShxdWVyeSkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICB2YXIgcmVzLCBkYXRhOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiUmVhY2hlZCBQb3N0Iik7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCh1cmwuY29uY2F0KCcvc2VhcmNoLycsIHF1ZXJ5KSk7CgogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5tYXAoZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmVzdWx0cyk7CiAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA5OwogICAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgICByZWplY3QoX2NvbnRleHQudDApOwoKICAgICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1sxLCA5XV0pOwogICAgICAgIH0pKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCwgX3gyKSB7CiAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0U2ltcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2ltcyhxdWVyeSkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgIHZhciByZXMsIGRhdGE7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiSSBhbSBsb29raW5nIGZvciBzaW1zIik7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KHVybC5jb25jYXQoJy9nZXRTaW0vJywgcXVlcnkpKTsKCiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgICBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5tYXAoZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmVzdWx0cyk7CiAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDk7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICAgICAgcmVqZWN0KF9jb250ZXh0Mi50MCk7CgogICAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMSwgOV1dKTsKICAgICAgICB9KSk7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gzLCBfeDQpIHsKICAgICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlU2Vzc2lvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU2Vzc2lvbihpZCwgY29uZGl0aW9uLCBwYXNzZWRGaXJzdFRlc3QpIHsKICAgICAgcmV0dXJuIGF4aW9zLnBvc3QodXJsLmNvbmNhdCgnL2NyZWF0ZVNlc3Npb24vJyksIHsKICAgICAgICBpZDogaWQsCiAgICAgICAgY29uZGl0aW9uOiBjb25kaXRpb24sCiAgICAgICAgcGFzc2VkRmlyc3RUZXN0OiBwYXNzZWRGaXJzdFRlc3QKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2VuZXJpY1VwZGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJpY1VwZGF0ZShpZCwgZmllbGQsIHZhbHVlKSB7CiAgICAgIHJldHVybiBheGlvcy5wb3N0KHVybC5jb25jYXQoJy9nZW5lcmljVXBkYXRlLycpLCB7CiAgICAgICAgaWQ6IGlkLAogICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICBmaWVsZDogZmllbGQKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUG9zdFNlcnZpY2U7Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IFBvc3RTZXJ2aWNlOw=="},{"version":3,"sources":["C:/Users/John Doe/Desktop/New folder/alphaBuild/client/src/SearchService.js"],"names":["axios","url","PostService","query","Promise","resolve","reject","console","log","get","concat","res","data","map","results","id","condition","passedFirstTest","post","field","value"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,GAAG,GAAE,2BAAX;;IAEMC,W;;;;;;;gCACiBC,K,EAAO;AACtB,aAAO,IAAIC,OAAJ;AAAA,2EAAY,iBAAMC,OAAN,EAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADe;AAAA;AAAA,yBAGOR,KAAK,CAACS,GAAN,CAAUR,GAAG,CAACS,MAAJ,CAAW,UAAX,EAAsBP,KAAtB,CAAV,CAHP;;AAAA;AAGLQ,kBAAAA,GAHK;AAILC,kBAAAA,IAJK,GAIED,GAAG,CAACC,IAJN;AAMXP,kBAAAA,OAAO,CACHO,IAAI,CAACC,GAAL,CAAS,UAAAC,OAAO;AAAA,6CACTA,OADS;AAAA,mBAAhB,CADG,CAAP;AANW;AAAA;;AAAA;AAAA;AAAA;AAYXR,kBAAAA,MAAM,aAAN;;AAZW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AAeH;;;4BACcH,K,EAAO;AAClB,aAAO,IAAIC,OAAJ;AAAA,4EAAY,kBAAMC,OAAN,EAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,kBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AADe;AAAA;AAAA,yBAGOR,KAAK,CAACS,GAAN,CAAUR,GAAG,CAACS,MAAJ,CAAW,UAAX,EAAsBP,KAAtB,CAAV,CAHP;;AAAA;AAGLQ,kBAAAA,GAHK;AAILC,kBAAAA,IAJK,GAIED,GAAG,CAACC,IAJN;AAKXP,kBAAAA,OAAO,CACHO,IAAI,CAACC,GAAL,CAAS,UAAAC,OAAO;AAAA,6CACTA,OADS;AAAA,mBAAhB,CADG,CAAP;AALW;AAAA;;AAAA;AAAA;AAAA;AAWXR,kBAAAA,MAAM,cAAN;;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AAcH;;;kCACoBS,E,EAAGC,S,EAAUC,e,EAAiB;AAC/C,aAAOjB,KAAK,CAACkB,IAAN,CAAWjB,GAAG,CAACS,MAAJ,CAAW,iBAAX,CAAX,EAA0C;AAC7CK,QAAAA,EAAE,EAAFA,EAD6C;AACzCC,QAAAA,SAAS,EAATA,SADyC;AAC9BC,QAAAA,eAAe,EAAfA;AAD8B,OAA1C,CAAP;AAGH;;;kCACoBF,E,EAAGI,K,EAAMC,K,EAAO;AACjC,aAAOpB,KAAK,CAACkB,IAAN,CAAWjB,GAAG,CAACS,MAAJ,CAAW,iBAAX,CAAX,EAA0C;AAC7CK,QAAAA,EAAE,EAAFA,EAD6C;AACzCK,QAAAA,KAAK,EAALA,KADyC;AAClCD,QAAAA,KAAK,EAALA;AADkC,OAA1C,CAAP;AAGH;;;;;;AAEL,eAAejB,WAAf","sourcesContent":["/* eslint-disable no-async-promise-executor */\r\nimport axios from 'axios';\r\n\r\nconst url ='http://localhost:5000/api'\r\n\r\nclass PostService {\r\n    static searchMovie(query) {\r\n        return new Promise(async(resolve, reject) => {\r\n            console.log(\"Reached Post\")\r\n            try{\r\n                const res = await axios.get(url.concat('/search/',query))\r\n                const data = res.data;\r\n\r\n                resolve(\r\n                    data.map(results => ({\r\n                        ...results\r\n                    }))\r\n                );\r\n            } catch(err) {\r\n                reject(err)\r\n            }\r\n        })\r\n    }\r\n    static getSims(query) {\r\n        return new Promise(async(resolve, reject) => {\r\n            console.log(\"I am looking for sims\")\r\n            try{\r\n                const res = await axios.get(url.concat('/getSim/',query))\r\n                const data = res.data;\r\n                resolve(\r\n                    data.map(results => ({\r\n                        ...results\r\n                    }))\r\n                ); \r\n            } catch(err) {\r\n                reject(err)\r\n            }\r\n        })\r\n    }\r\n    static createSession(id,condition,passedFirstTest) {\r\n        return axios.post(url.concat('/createSession/'), {\r\n            id, condition, passedFirstTest\r\n       });\r\n    }\r\n    static genericUpdate(id,field,value) {\r\n        return axios.post(url.concat('/genericUpdate/'), {\r\n            id, value, field\r\n        })\r\n    }\r\n}\r\nexport default PostService"]}]}