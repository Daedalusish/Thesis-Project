{"remainingRequest":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\src\\views\\Welcome.vue?vue&type=template&id=e4731dd0&scoped=true&","dependencies":[{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\src\\views\\Welcome.vue","mtime":1590436642370},{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\John Doe\\Desktop\\New folder\\alphaBuild\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiY29udGFpbmVyIiB9IH0sIFsKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbkNvbnRhaW5lciIgfSwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJUYXNrIERlc2NyaXB0aW9uIildKSwKICAgICAgX3ZtLl9tKDApLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91ciB0YXNrIGlzIHRvIHJlbWVtYmVyIHRoZSBsYXN0IHRpbWUgd2hlbiB5b3UgZW5qb3llZCB3YXRjaGluZyBhIG1vdmllLCBmb3IgZXhhbXBsZSwgd2l0aCBmcmllbmRzIGluIGEgY2luZW1hIG9yIGFsb25lIGF0IGhvbWUuIEltYWdpbmUgdGhhdCBub3csIHlvdSB3b3VsZCBsaWtlIHRvIHJlcGVhdCB0aGlzIGV4cGVyaWVuY2UuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfdm0uX20oMSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOb3RlIHRoYXQgb3VyIHN1cnZleSBzeXN0ZW0gb25seSBjb250YWlucyBhIGxpbWl0ZWQgbnVtYmVyIG9mIG1vdmllczsgZXNwZWNpYWxseSBuZXdlciBtb3ZpZXMgbWlnaHQgYmUgbWlzc2luZy4gSWYgdGhlIG1vdmllIHlvdSB3b3VsZCBsaWtlIHRvIHNlbGVjdCBpcyBub3QgYXZhaWxhYmxlLCBwbGVhc2UgdHJ5IGFub3RoZXIgb25lLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gY2hlY2sgdGhhdCB5b3UgcmVhZCB0aGUgYWJvdmUgZGVzY3JpcHRpb24gY2FyZWZ1bGx5LCB3ZSBhc2sgeW91IGtpbmRseSB0byBjbGljayAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBpZDogImhpZGRlbkJ1dHRvbiIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnByb2NlZWQodHJ1ZSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJoZXJlIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiB0byBwcm9jZWVkIGluc3RlYWQgb2YgY2xpY2tpbmcgb24gdGhlIGJ1dHRvbiBiZWxvdy4iKQogICAgICBdKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJUaGFuayB5b3UgZm9yIHlvdXIgcGFydGljaXBhdGlvbiBpbiB0aGlzIHN0dWR5ISIpCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZha2VCdXR0b24iLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uZGVidWcoZmFsc2UsIDEpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkNvbmRpdGlvbiAxQSIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZha2VCdXR0b24iLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uZGVidWcoZmFsc2UsIDIpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkNvbmRpdGlvbiAxQiIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZha2VCdXR0b24iLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uZGVidWcoZmFsc2UsIDMpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkNvbmRpdGlvbiAxQyIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZha2VCdXR0b24iLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uZGVidWcoZmFsc2UsIDQpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkNvbmRpdGlvbiAyQSIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZha2VCdXR0b24iLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uZGVidWcoZmFsc2UsIDUpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkNvbmRpdGlvbiAyQiIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZha2VCdXR0b24iLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uZGVidWcoZmFsc2UsIDYpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkNvbmRpdGlvbiAyQyIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZha2VCdXR0b24iLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0ucHJvY2VlZChmYWxzZSkKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiQ29udGludWUiKV0KICAgICAgKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidGFibGUiLCBbCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGgiLCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUgZmEtM3giIH0pCiAgICAgICAgXSksCiAgICAgICAgX2MoInRoIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhyb3VnaG91dCB0aGUgc3R1ZHksIHlvdSB3aWxsIHNlZSB0aGlzIHR5cGUgb2YgaW5zdHJ1Y3Rpb24gYm94IGF0IHRoZSB0b3Agb2YgZXZlcnkgcGFnZS5SZWFkIGl0IGNhcmVmdWxseSBlYWNoIHRpbWUhIERvIG5vdCByZWZyZXNoIHRoZSBwYWdlIGF0IGFueSB0aW1lIG9yIHlvdXIgcHJvZ3Jlc3Mgd2lsbCBiZSBsb3N0LiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInNwYW4iLCB7IGF0dHJzOiB7IGlkOiAiYWxlcnRlciIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEluIHRoZSBmb2xsb3dpbmcsIHlvdSB3aWxsIHJlY2VpdmUgYSB0YXNrIGRlc2NyaXB0aW9uLiBQbGVhc2UgcmVhZCBpdCBjYXJlZnVsbHkgdG8gdGhlIGVuZCIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygidGgiKSwKICAgICAgICBfYygidGgiLCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUgZmEtM3giIH0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgWwogICAgICBfdm0uX3YoIiBXZSBhc2sgeW91IHRvIGRvIHRoZSBmb2xsb3dpbmc6ICIpLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgMSkgRmlyc3QsIHdlIHdpbGwgYXNrIHlvdSB0byBzZWxlY3QgYSBtb3ZpZSB0aGF0IHlvdSBoYXZlIHdhdGNoZWQgYW5kIGVuam95ZWQgYXQgc29tZSBwb2ludC4gVGhpcyBtb3ZpZSB3aWxsIGJlIHlvdXIgcmVmZXJlbmNlIG1vdmllIGluIHRoZSBuZXh0IHN0ZXAuICIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIDIpIFdlIHdpbGwgdGhlbiByZWNvbW1lbmQgeW91IGEgbnVtYmVyIG9mIG90aGVyIG1vdmllcyB0byB3YXRjaC4gUGxlYXNlIGJyb3dzZSB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgYW5kIHNlbGVjdCBvbmUgb2YgdGhlIG1vdmllcyB0aGF0IHlvdSB3b3VsZCBsaWtlIHRvIHdhdGNoLiAiCiAgICAgICksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoIiAzKSBUaGVzZSB0d28gc3RlcHMgd2lsbCBiZSByZXBlYXRlZCBhIHRvdGFsIG9mIGZpdmUgdGltZXMuICIpLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KAogICAgICAgICIgMykgWW91IHdpbGwgdGhlbiBiZSBhc2tlZCBhIGZldyBxdWVzdGlvbnMgdGhhdCBjb25jbHVkZSB0aGUgc3R1ZHkuIFBsZWFzZSBhbnN3ZXIgdGhlbSBjYXJlZnVsbHkuICIKICAgICAgKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}